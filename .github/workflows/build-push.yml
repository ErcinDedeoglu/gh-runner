name: Build and Push Docker Image
on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
    paths:
      - 'src/**'
  workflow_dispatch:

env:
  IMAGE_NAME: gh-runner
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update version
        id: version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get branch name
          BRANCH=$(echo ${GITHUB_REF#refs/heads/})
          echo "Current branch: ${BRANCH}"
          
          # Extract base version and suffix
          if [[ $BRANCH =~ ^(v[0-9]+(\.[0-9]+)*)([-].+)?$ ]]; then
            BASE_VERSION="${BASH_REMATCH[1]}"
            SUFFIX="${BASH_REMATCH[3]:-}"
            echo "Base version: ${BASE_VERSION}"
            echo "Suffix: ${SUFFIX}"
          else
            echo "Branch name doesn't match expected pattern"
            BASE_VERSION="v0.0"
            SUFFIX=""
          fi
          
          # Create versions directory if it doesn't exist
          mkdir -p versions
          
          # Clean up other version files
          rm -f versions/*.json
          
          VERSION_FILE="versions/${BRANCH}.json"
          echo "Version file: ${VERSION_FILE}"
          
          # Check if version file exists and get content
          RESPONSE=$(curl -s -H "Authorization: token ${GH_TOKEN}" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/contents/${VERSION_FILE}")
          
          # Initialize build number
          if echo "$RESPONSE" | jq -e '.content' > /dev/null 2>&1; then
            echo "Existing version file found"
            echo "$RESPONSE" | jq -r '.content' | base64 --decode > ${VERSION_FILE}
            BUILD_NUMBER=$(jq -r '.build_number' ${VERSION_FILE})
            SHA=$(echo "$RESPONSE" | jq -r '.sha')
            echo "Current build number: ${BUILD_NUMBER}"
          else
            echo "No existing version file, starting from 0"
            BUILD_NUMBER=0
            SHA=""
          fi
          
          # Increment build number
          NEW_BUILD_NUMBER=$((BUILD_NUMBER + 1))
          echo "New build number: ${NEW_BUILD_NUMBER}"
          
          # Create new version file content
          echo "{
            \"branch\": \"${BRANCH}\",
            \"base_version\": \"${BASE_VERSION}\",
            \"build_number\": ${NEW_BUILD_NUMBER}
          }" > ${VERSION_FILE}
          
          # Create full version string
          if [ -n "$SUFFIX" ]; then
            FULL_VERSION="${BASE_VERSION}.${NEW_BUILD_NUMBER}${SUFFIX}"
          else
            FULL_VERSION="${BASE_VERSION}.${NEW_BUILD_NUMBER}"
          fi
          
          # Encode content to base64
          CONTENT=$(base64 -w 0 ${VERSION_FILE})
          
          # Prepare API request body
          if [ -n "$SHA" ]; then
            DATA="{\"message\": \"Update version to ${FULL_VERSION}\", \"content\": \"${CONTENT}\", \"sha\": \"${SHA}\"}"
          else
            DATA="{\"message\": \"Update version to ${FULL_VERSION}\", \"content\": \"${CONTENT}\"}"
          fi
          
          # Update file via GitHub API
          UPLOAD_RESPONSE=$(curl -X PUT -H "Authorization: token ${GH_TOKEN}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "${DATA}" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/contents/${VERSION_FILE}")
          
          # Verify upload was successful
          if echo "$UPLOAD_RESPONSE" | jq -e '.content.sha' > /dev/null 2>&1; then
            echo "Version file updated successfully"
          else
            echo "Error updating version file:"
            echo "$UPLOAD_RESPONSE"
            exit 1
          fi
          
          # Set full version for later use
          echo "full_version=${FULL_VERSION}" >> $GITHUB_OUTPUT

    #   - name: Set up QEMU
    #     uses: docker/setup-qemu-action@v3

    #   - name: Set up Docker Buildx
    #     uses: docker/setup-buildx-action@v3

    #   - name: Log in to Docker Hub
    #     if: github.event_name != 'pull_request'
    #     uses: docker/login-action@v3
    #     with:
    #       username: ${{ secrets.DOCKER_USERNAME }}
    #       password: ${{ secrets.DOCKER_TOKEN }}

    #   - name: Log in to GitHub Container Registry
    #     if: github.event_name != 'pull_request'
    #     uses: docker/login-action@v3
    #     with:
    #       registry: ghcr.io
    #       username: ${{ github.actor }}
    #       password: ${{ secrets.GITHUB_TOKEN }}

    #   - name: Extract metadata (tags, labels) for Docker
    #     id: meta
    #     uses: docker/metadata-action@v5
    #     with:
    #       images: |
    #         ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
    #         ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
    #       tags: |
    #         type=raw,value=${{ steps.version.outputs.full_version }}
    #         type=ref,event=branch
    #         type=ref,event=pr
    #         type=sha

    #   - name: Build and push Docker image
    #     uses: docker/build-push-action@v5
    #     with:
    #       context: src
    #       platforms: ${{ env.PLATFORMS }}
    #       push: ${{ github.event_name != 'pull_request' }}
    #       tags: ${{ steps.meta.outputs.tags }}
    #       labels: ${{ steps.meta.outputs.labels }}
    #       cache-from: type=gha
    #       cache-to: type=gha,mode=max