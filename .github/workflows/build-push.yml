name: Build and Push Docker Image
on:
  push:
    paths:
      - 'src/**'
  workflow_dispatch:
env:
  IMAGE_NAME: gh-runner
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  PLATFORMS: linux/amd64,linux/arm64
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Update version
        id: version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pip install requests
          chmod +x .github/scripts/update_version.py
          .github/scripts/update_version.py
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate Docker Tags
        id: meta
        run: |
          # Parse tags JSON into Docker format
          TAGS_JSON='${{ steps.version.outputs.tags }}'
          # Convert repository owner to lowercase
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          # Generate Docker Hub tags
          DOCKERHUB_TAGS=$(echo "$TAGS_JSON" | jq -r '.[] | "${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:" + .')
          # Generate GitHub Container Registry tags
          GHCR_TAGS=$(echo "$TAGS_JSON" | jq -r '.[] | "ghcr.io/'"${REPO_OWNER}"'/${{ env.IMAGE_NAME }}:" + .')
          # Combine all tags into a comma-separated list
          ALL_TAGS=$(echo -e "${DOCKERHUB_TAGS}\n${GHCR_TAGS}" | paste -sd "," -)
          # Set output
          echo "tags=${ALL_TAGS}" >> $GITHUB_OUTPUT
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: src
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.version=${{ steps.version.outputs.full_version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Save Docker images as artifacts
        run: |
          set -e # Exit on any error
          IFS=',' read -ra TAGS <<< "${{ steps.meta.outputs.tags }}"
          for TAG in "${TAGS[@]}"; do
            # Replace *** with actual Docker username
            ACTUAL_TAG=$(echo "$TAG" | sed "s/\*\*\*/${DOCKER_USERNAME}/g")
            echo "Saving image: $ACTUAL_TAG"
            SAFE_TAG=$(echo "$ACTUAL_TAG" | tr '/' '_')
            if ! docker save -o "${SAFE_TAG}.tar" "$ACTUAL_TAG"; then
              echo "Failed to save image: $ACTUAL_TAG"
              exit 1
            fi
          done
      - name: Combine Docker images into a single tar file
        run: |
          TAGS=(${{ steps.meta.outputs.tags }})
          for TAG in "${TAGS[@]}"; do
            SAFE_TAG=$(echo "$TAG" | tr '/' '_')
            tar -rf "${{ env.IMAGE_NAME }}.tar" "${SAFE_TAG}.tar"
          done
      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.IMAGE_NAME }}
          path: ${{ env.IMAGE_NAME }}.tar
      - name: Generate SBOM
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FULL_VERSION: ${{ steps.version.outputs.full_version }}
        run: |
          chmod +x .github/scripts/generate_sbom.py
          .github/scripts/generate_sbom.py
      - name: Generate Vulnerability Report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FULL_VERSION: ${{ steps.version.outputs.full_version }}
        run: |
          chmod +x .github/scripts/generate_vulnerability_report.py
          .github/scripts/generate_vulnerability_report.py
      - name: Create Release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          chmod +x .github/scripts/publish_release.py
          .github/scripts/publish_release.py
      - name: Upload Docker image to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ${{ env.IMAGE_NAME }}.tar
          asset_name: ${{ env.IMAGE_NAME }}.tar
          asset_content_type: application/octet-stream