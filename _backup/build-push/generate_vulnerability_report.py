#!/usr/bin/env python3
import os
import sys
import base64
import logging
import subprocess
from pathlib import Path
import requests

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def docker_login():
    """Login to GitHub Container Registry."""
    try:
        github_token = os.environ['GITHUB_TOKEN']
        github_actor = os.environ['GITHUB_ACTOR']
        
        login_cmd = [
            'docker', 'login', 'ghcr.io',
            '-u', github_actor,
            '--password-stdin'
        ]
        
        subprocess.run(
            login_cmd,
            input=github_token.encode(),
            check=True,
            capture_output=True
        )
        logger.info("Successfully logged in to GitHub Container Registry")
    except Exception as e:
        logger.error(f"Failed to login to GitHub Container Registry: {e}")
        raise

def generate_vulnerability_report():
    """Generate vulnerability report using Trivy."""
    try:
        repo_owner = os.environ['GITHUB_REPOSITORY_OWNER'].lower()
        image_name = os.environ['IMAGE_NAME']
        full_version = os.environ['FULL_VERSION']
        
        image_tag = f"ghcr.io/{repo_owner}/{image_name}:{full_version}"
        
        trivy_cmd = [
            'docker', 'run', '--rm',
            '-v', '/var/run/docker.sock:/var/run/docker.sock',
            '-v', 'vulnerability_cache_volume:/root/.cache/',
            '-v', f'{os.getcwd()}:/reports',
            'aquasec/trivy:latest',
            '--db-repository', 'public.ecr.aws/aquasecurity/trivy-db',
            'image',
            '--format', 'table',
            '--output', '/reports/.vulnerability_report.txt',
            image_tag
        ]
        
        subprocess.run(trivy_cmd, check=True)
        logger.info("Successfully generated vulnerability report")
            
    except Exception as e:
        logger.error(f"Failed to generate vulnerability report: {e}")
        raise

def update_github_file(file_path: Path, github_path: str):
    """Update or create a file in GitHub repository."""
    try:
        github_token = os.environ['GITHUB_TOKEN']
        github_repo = os.environ['GITHUB_REPOSITORY']
        
        headers = {
            'Authorization': f'token {github_token}',
            'Accept': 'application/vnd.github.v3+json'
        }
        url = f'https://api.github.com/repos/{github_repo}/contents/{github_path}'

        # Read file content
        with open(file_path, 'rb') as f:
            content = base64.b64encode(f.read()).decode()

        # Check if file exists
        response = requests.get(url, headers=headers)
        
        data = {
            'message': f'Update vulnerability report',
            'content': content,
        }
        if response.status_code == 200:
            # File exists, include its SHA
            data['sha'] = response.json()['sha']

        # Create or update file
        response = requests.put(url, headers=headers, json=data)
        response.raise_for_status()
        logger.info(f"Successfully updated {github_path}")
    except Exception as e:
        logger.error(f"Failed to update {github_path}: {e}")
        raise

def main():
    """Main function to orchestrate vulnerability report generation and upload."""
    try:
        docker_login()
        generate_vulnerability_report()
        
        # Update vulnerability report in the repository
        report_file = Path('.vulnerability_report.txt')
        if report_file.exists():
            update_github_file(report_file, '.vulnerability_report.txt')
            
    except Exception as e:
        logger.error(f"Vulnerability report generation and upload failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()